#define _GNU_SOURCE
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define BUF_SIZE 100

struct header {
  uint64_t size;
  struct header *next;
};

void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    write(STDERR_FILENO, "snprintf error\n", 15);
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  void *block_start = sbrk(256);
  if (block_start == (void *)-1) {
    write(STDERR_FILENO, "sbrk failedd\n", 12);
    return 1;
  }

  struct header *block1 = (struct header *)block_start;
  struct header *block2 = (struct header *)((char *)block_start + 128);

  block1->size = 128;
  block1->next = NULL;

  block2->size = 128;
  block2->next = block1;

  print_out("first block: %p\n", block1, sizeof(void *));
  print_out("second block: %p\n", block2, sizeof(void *));

  print_out("first block size: %lu\n", &block1->size, sizeof(uint64_t));
  print_out("first block next: %p\n", &block1->next, sizeof(void *));

  print_out("second block size: %lu\n", &block2->size, sizeof(uint64_t));
  print_out("second block next: %p\n", &block2->next, sizeof(void *));

  size_t data_size = 128 - sizeof(struct header);
  char *data1 = (char *)(block1 + sizeof(struct header));
  char *data2 = (char *)(block2 + sizeof(struct header));

  print_out("data2: %p\n", data2, sizeof(void *));
  print_out("block2: %p\n", block2, sizeof(void *));

  memset(data1, 0, data_size);
  memset(data2, 1, data_size);

  for (size_t i = 0; i < data_size; ++i) {
    print_out("%d\n", &data1[i], sizeof(uint8_t));
  }
  for (size_t i = 0; i < data_size; ++i) {
    print_out("%d\n", &data2[i], sizeof(uint8_t));
  }

  return 0;
}
