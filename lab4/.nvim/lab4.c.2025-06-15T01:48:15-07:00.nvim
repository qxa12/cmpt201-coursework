#define _GNU_SOURCE
#include <unistd.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#define BUF_SIZE 100
#define BLOCK_SIZE 128
#define TOTAL_SIZE 256

void print_out(char *format, void *data, size_t data_size) {
    char buf[BUF_SIZE];
    ssize_t len = snprintf(buf, BUF_SIZE, format,
        data_size == sizeof(uint64_t) ? *(uint64_t *)data : *(void **)data);
    if (len < 0) {
        write(STDERR_FILENO, "snprintf error\n", 15);
        exit(1);
    }
    write(STDOUT_FILENO, buf, len);
}

struct header {
    uint64_t size;
    struct header* next;
};

void* increase_heap(size_t size) {
    void* block = sbrk(size);
    if (block == (void*)-1) {
        write(STDERR_FILENO, "sbrk failed\n", 12);
        exit(1);
    }
    return block;
}

void initialize_block(struct header* block, uint64_t size, struct header* next, int value) {
    block->size = size;
    block->next = next;
    void* data_start = (char*)block + sizeof(struct header);
    size_t data_size = size - sizeof(struct header);
    memset(data_start, value, data_size);
}

void print_block(struct header* block) {
    print_out("block address: %p\n", block, sizeof(void*));
    print_out("block size: %lu\n", &block->size, sizeof(uint64_t));
    print_out("block next: %p\n", &block->next, sizeof(void*));
    void* data = (char*)block + sizeof(struct header);
    size_t data_size = block->size - sizeof(struct header);
    for (size_t i = 0; i < data_size; ++i)
        print_out("%d\n", (char*)data + i, sizeof(char));
}

int main() {
    void* base = increase_heap(TOTAL_SIZE);
    struct header* b1 = (struct header*)base;
    struct header* b2 = (struct header*)((char*)base + BLOCK_SIZE);

    initialize_block(b1, BLOCK_SIZE, NULL, 0);
    initialize_block(b2, BLOCK_SIZE, b1, 1);

    print_block(b1);
    print_block(b2);

    return 0;
}

