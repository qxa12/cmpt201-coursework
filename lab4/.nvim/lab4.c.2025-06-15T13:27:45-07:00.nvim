#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <unistd.h>

#define BLOCK_SIZE 128
#define EXTRA_SIZE (2 * BLOCK_SIZE)
#define BUF_SIZE 256

struct header {
  uint64_t size;
  struct header *next;
};

// 打印函数（必须使用 write 替代 printf）
void print_out(char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format,
                         data_size == sizeof(uint64_t) ? *(uint64_t *)data
                                                       : *(void **)data);
  if (len < 0) {
    _exit(1);
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  // 1. 增加 heap size
  void *start = sbrk(EXTRA_SIZE);
  if (start == (void *)-1) {
    _exit(1);
  }

  // 2. 设置 block 指针
  struct header *first = (struct header *)start;
  struct header *second = (struct header *)((char *)start + BLOCK_SIZE);

  // 初始化 header
  first->size = BLOCK_SIZE;
  first->next = NULL;

  second->size = BLOCK_SIZE;
  second->next = first;

  // 打印 header 信息前的指针地址
  print_out("first block: %p\n", first, sizeof(void *));
  print_out("second block: %p\n", second, sizeof(void *));

  print_out("first block size: %lu\n", &first->size, sizeof(uint64_t));
  print_out("first block next: %p\n", &first->next, sizeof(void *));

  print_out("second block size: %lu\n", &second->size, sizeof(uint64_t));
  print_out("second block next: %p\n", &second->next, sizeof(void *));

  // 数据区域起始位置（跳过 header）
  void *first_data = (void *)((char *)first + sizeof(struct header));
  void *second_data = (void *)((char *)second + sizeof(struct header));

  // 初始化数据部分：memset
  memset(first_data, 0, BLOCK_SIZE - sizeof(struct header));
  memset(second_data, 1, BLOCK_SIZE - sizeof(struct header));

  // 打印数据：每 byte 一行
  unsigned char *b1 = (unsigned char *)first_data;
  unsigned char *b2 = (unsigned char *)second_data;

  for (int i = 0; i < BLOCK_SIZE - sizeof(struct header); ++i) {
    print_out("%d\n", &b1[i],
              sizeof(uint64_t)); // 实际是1 byte，但格式统一为 uint64_t
  }

  for (int i = 0; i < BLOCK_SIZE - sizeof(struct header); ++i) {
    print_out("%d\n", &b2[i], sizeof(uint64_t));
  }

  return 0;
}
